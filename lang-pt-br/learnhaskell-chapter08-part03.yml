title: Type parameters

text:  Um construtor de valor pode receber alguns valores de parâmetro e então produzir um novo valor. Por exemplo, o construtor [code]Car[/code] recebe três valores e produz o valor car. De maneira similar, <em>type constructors</em> pode receber tipos como parâmetros para produzir um novo tipo. Isso pode soar um pouco estranho inicialmente, porém não é nada complicado. Se você é familiar com templates em C++, você vai perceber algumas semelhanças. Para obter uma imagem clara de como type parameters funcionam em ação, vamos dar uma olhada em como um tipo que já conhecemos é implementado.



A letra [code]a[/code] aqui é um type parameter. E, porque há um type parameter envolvido, nós chamamos  [code]Maybe[/code] como um construtor de tipo. Dependendo do que nós queremos que esse tipo de dado guarde quando ele não for  [code]Nothing[/code], esse construtor de tipo poderá acabar produzindo tipos como [code]Maybe Int[/code], [code]Maybe Car[/code], [code]Maybe String[/code], etc. Nenhum valor pode ter apenas o tipo [code]Maybe[/code], devido ao fato de que ele não é exatamente um tipo, ele é um construtor de tipos. A fim de que ele seja um tipo real de forma que um valor possa fazer parte dele, ele precisa que todos seus types parameters sejam preenchidos.

Logo, se nós passarmos [code]Char[/code] como sendo o type parameter de [code]Maybe[/code], nós temos um tipo de [code]Maybe Char[/code]. O valor [code]Just 'a'[/code] tem o tipo de [code]Maybe Char[/code], por exemplo.

Você pode não saber, porém nós usamos um tipo que tem um type parameter antes de usarmos [code]Maybe[/code]. Esse tipo é o tipo list. Embora haja um pouco de açúcar sintático em jogo, o tipo list recebe um parametro e produz um tipo concreto. Os valores podem ter o tipo  [code][Int][/code], ou o tipo [code][Char][/code], ou o tipo [code][[String]][/code], mas você não pode ter um valor cujo o tipo seja [code][][/code].

Vamos brincar um pouco com o tipo [code]Maybe[/code].



Os type parameters são úteis pois nós podemos criar diferentes tipos com eles, dependendo da espécie de tipos nós queremos que contenha nos nossos dados. Quando nós fazemos [code]:t Just "Haha"[/code], o motor de inferência de tipos identifica-os como sendo do tipo [code]Maybe [Char][/code], devido ao fato de que o [code]a[/code] no [code]Just a[/code] é uma string, então o code]a[/code] no [code]Maybe a[/code] também deve ser uma string.




Perceba que o tipo de [code]Nothing[/code] é [code]Maybe a[/code]. Seu tipo é polimórfico. Se alguma função necessitar de um [code]Maybe Int[/code] como parâmetro, nós podemos lhe entregar um [code]Nothing[/code], uma vez que um [code]Nothing[/code] não contém nenhum valor de qualquer maneira. O tipo [code]Maybe a[/code] pode agir como um [code]Maybe Int[/code] se ele precisar, bem como [code]5[/code] pode agir como um [code]Int[/code] ou como um [code]Double[/code]. Similarmente, o tipo de uma lista vazia é [code][a][/code]. Uma lista vazia pode agir como uma list de qualquer coisa. Por isso é que nós podemos fazer[code][1,2,3] ++[][/code] e [code]["ha","ha","ha"] ++ [][/code].

Usar o type parameters é muito beneficial, mas somente quando seu uso faz sentido. Normalmente nós usamo-os quando nosso tipo de dados funciona indementemente do tipo do valor que ele guarda internamente, bem como nosso tipo [code]Maybe a[/code]. Se o nosso tipo age como uma espécie de caixa, é bom utiliza-lo. Nós podemos trocar nosso tipo de dados [code]Car[/code], de isto:

Para isto:



Mas será que nós realmente nos beneficiamos? A resposta é: provavelmente não, porque nós acabamos definindo funções que somente funcionam no tipo [code]Car String String Int[/code]. Por exemplo, dado a nova primeira definição de [code]Car[/code], nós podemos fazer uma função que exibe as propriedades do carro em um texto agradável.



Uma função bonitinha! A declaração de tipo é elegante e funciona satisfatoriamente. Agora, e se [code]Car[/code] fosse [code]Car a b c[/code]?



Nós teríamos que forcar essa função a receber um [code]Car[/code] do tipo [code](Show a) =&gt; Car String String a[/code]. Você pode ver que o tipo de assinatura é mais complicada e o ´unico benefício que nós realmente teríamos seria que poderíamos usar qualquer tipo que seja uma instância do typeclass [code]Show[/code] como tipo de [code]c[/code].



Na vida real, porém, nós acabaríamos usando [code]Car String String Int[/code] na maior parte do tempo e assim parece que a parametrização do tipo [code]Car[/code] não vale realmente a pena. We usually use type parameters when the type that's contained inside the data type's various value constructors isn't really that important for the type to work. A lista de alguma coisa é uma lista de alguma coisa e não importa o tipo de coisa que é, isso continua funcionando. Se nós quisermos somar uma lista de números, poderíamos especificar mais tarde na função de soma que nós queremos especificamente uma lista de números. O mesmo acontece com [code]Maybe[/code]. [code]Maybe[/code] representa uma opção de não ter nada ou de ter alguma coisa. Não import a qualo tipo de coisa que é.


Outro exemplo de tipo parametrizado que nós já havíamos conhecido é [code]Map k v[/code] de [code]Data.Map[/code]. O [code]k[/code] é o tipo das chaves em um mapa e o [code]v[/code] é o tipo dos valores. Este é um bom exemplo de como type parameters podem ser muito úteis. Ter mapas parametrizados nos habilita a ter mapas apartir de qualquer tipo para qualquer outro tipo, desde que o tipo da chave seja parte da typesclass [code]Ord[/code]. Se nós fôssemos definir um tipo mapa, nós poderíamos adicionar uma typeclass constraints na declaração de <i>data</i>:




No entanto, há uma convenção muito forte em Haskell para que <em>nunca se adicione uma typeclass constraints na declaradação de dados.</em>Porque? Bem, porque nós não nos beneficiamos muito, e nós acabamos escrevendo mais restrições de classes, mesmo quando não necessitamos delas.


Se nós colocarmos ou não colocarmo a restrição [code]Ord k[/code] na declaração <i>data</i> de [code]Map k v[/code], nós teremos que colocar a restrição nas funções assumindo que as chaves em um map podem ser ordenadas. Porém, se nós não colocarmos a restrição na declaração de data, nós não temos que colocar [code](Ord k) =&gt;[/code] na declaração de tipos de funções que não se importam se as chaves devem ser ordenadas ou não. Um exemplo de uma função assim é a [code]toList[/code], que recebe um mapa e converte-o para uma lista associativa. O seu tipo de assinatura é [code]toList :: Map k a -&gt; [(k, a)][/code]. Se [code]Map k v[/code] tem uma restrição de tipo na sua declaração de <i>data</i>, o tipo [code]toList[/code] deve ser [code]toList :: (Ord k) =&gt; Map k a -&gt; [(k, a)][/code], mesmo embora que a função não faça nenhum tipo de comparação das chaves pela ordem.


Logo, não coloque restrições de tipo nas declarações de <i>data</i> mesmo que pareça fazer sentido, porque você vai precisar coloca-las dentro da declaração do tipo da função de qualquer forma.

Vamos implementar tipo vetor 3D e adicionar algumas operações nele. Nós vamos estar utilizar um tipo parametrizado porque apesar dele normalmente conter tipos numéricos, ele ainda deve suportar vários deles.





[code]vplus[/code] is for adding two vectors together. Two vectors are added just by adding their corresponding components. [code]scalarMult[/code] is for the scalar product of two vectors and [code]vectMult[/code] is for multiplying a vector with a scalar. These functions can operate on types of [code]Vector Int[/code], [code]Vector Integer[/code], [code]Vector Float[/code], whatever, as long as the [code]a[/code] from [code]Vector a[/code] is from the [code]Num[/code] typeclass. Also, if you examine the type declaration for these functions, you'll see that they can operate only on vectors of the same type and the numbers involved must also be of the type that is contained in the vectors. Notice that we didn't put a [code]Num[/code] class constraint in the <i>data</i> declaration, because we'd have to repeat it in the functions anyway.

Once again, it's very important to distinguish between the type constructor and the value constructor. When declaring a data type, the part before the [code]=[/code] is the type constructor and the constructors after it (possibly separated by [code]|[/code]'s) are value constructors. Giving a function a type of [code]Vector t t t -&gt; Vector t t t -&gt; t[/code] would be wrong, because we have to put types in type declaration and the vector <em>type</em> constructor takes only one parameter, whereas the value constructor takes three. Let's play around with our vectors.
