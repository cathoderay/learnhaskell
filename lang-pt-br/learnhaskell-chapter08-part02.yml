title: Record syntax

text:  OK, nós precisamos criar um tipo de dado que descreve uma pessoa. A informação que queremos armazenar sobre esta pessoa é: nome, sobrenome, idade, altura, telefone e sorvete favorito. Não sei você, mas isto é tudo que eu sempre quis saber sobre uma pessoa. Vamos tentar!



O-key. O primeiro campo será o nome, o segundo será o sobrenome, o terceiro será a idade e assim por diante. Vamos fazer uma pessoa.



Isto é legal, apesar de ser muito legível. E se nós quisessemos criar uma função para pegar cada informação de uma pessoa? Uma função para pegar o nome de uma pessoa, uma função para pegar o sobrenome de uma pessoa, etc. Bem, precisamos definir estas funções desta forma.



Nossa! Eu certamente não gostaria de escrever isto! Além de ser muito pesado e CHATO de escrever, esse método funciona.



Deve existir uma maneira melhor, você deve estar pensando. Bem, não, não há. Desculpe.


Brincadeirinha, veja só. Hahaha! Os makers de Haskell são muito espertos e anteciparam esse cenário. Eles incluiram uma forma alternativa para escrever data types. Veja agora como nós podemos acalçar a mesma funcionalidade com record syntax.



Então, ao invés de apenas nomear os tipos de campo um após o outro e separando-os com espaços, nós usamos chaves. Primeiramente, nós escrevemos o nome do campo, por exemplo, e então nós escrevemos dois pontos, duas vezes [code]::[/code] (também chamado Paamayim Nekudotayim, haha), e então nós especificamos o tipo. O tipo de dado resultante é exatamente o mesmo. O maior benefício disto é que ele cria funções que que pesquisam campos no tipo de dado. Usando o record syntax para criar este tipo de dado, Haskell automaticamente cria essas funções:  [code]firstName[/code], [code]lastName[/code], [code]age[/code], [code]height[/code], [code]phoneNumber[/code] e [code]flavor[/code].



Existe ainda outro benefício em usar record syntax. Quando derivamos [code]Show[/code] para seu tipo, ele exibe de forma diferente se nós usarmos record syntax para definir e instanciar o tipo. Digamos que nós temos um tipo que representa um carro. Nós queremos acompanhar a empresa que o fez, o nome do modelo e o seu ano de fabricação. Veja.


Se nós o definirmos usando record systax, nós podemos criar um novo carro dessa forma.



Ao criar um novo carro, nós não necessariamente tempos que colocar os campos na ordem correta, enquanto nós listamos todos eles. Porém, se nós não usarmos record syntax, nós temos que especifica-los em ordem.


Use record syntax when a constructor has several fields and it's not obvious which field is which. If we make a 3D vector data type by doing [code]data Vector = Vector Int Int Int[/code], it's pretty obvious that the fields are the components of a vector. However, in our [code]Person[/code] and [code]Car[/code] types, it wasn't so obvious and we greatly benefited from using record syntax.
